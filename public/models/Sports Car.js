/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import modelsFolder from 'constants/modelsFolder'
import { useFrame } from '@react-three/fiber';
import { Vector3 } from 'three';
import { degToRad } from 'three/src/math/MathUtils';

export function ModelSportsCar(props) {
    const { nodes, materials } = useGLTF(`${modelsFolder}Sports Car.glb`)
    const carRef = useRef();

    // Define waypoints
    const waypoints = [
        new Vector3(4.25, 0.05, 4.25),  // Start
        new Vector3(4.25, 0.05, -4.25), // Down
        new Vector3(-4.25, 0.05, -4.25), // Left
        new Vector3(-4.25, 0.05, 4.25),  // Up
    ];

    const speed = 5; // Adjust speed for smoother animation
    const rotations = [degToRad(-270), degToRad(180), degToRad(-90), degToRad(0)];

    // const [currentWaypoint, setCurrentWaypoint] = useState(0); // Track the current waypoint
    const [currentWaypoint, setCurrentWaypoint] = useState(Math.floor(Math.random() * waypoints.length));
    // const [position, setPosition] = useState([...waypoints[0]]); // Start at (10, 0, 10)

    useFrame((_, delta) => {
        if (!carRef.current) return;

        let pos = carRef.current.position;
        const target = waypoints[currentWaypoint];

        // Move towards target at a constant speed
        const direction = new Vector3().subVectors(target, pos).normalize();
        pos.addScaledVector(direction, speed * delta);

        // Check if we reached the target
        if (pos.distanceTo(target) < 0.1) {
            setCurrentWaypoint((prev) => (prev + 1) % waypoints.length);
            carRef.current.rotation.y = rotations[(currentWaypoint + 1) % rotations.length]; // Rotate car
            pos.copy(target); // Snap to waypoint
        }
    });

    return (
        <group
            ref={carRef}
            {...props}
            dispose={null}
            // position={waypoints[currentWaypoint]} 
            // rotation={[0, rotations[currentWaypoint], 0]}
        >
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_Cube006-Mesh'].geometry}
                material={materials.White}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_Cube006-Mesh_1'].geometry}
                material={materials.Windows}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_Cube006-Mesh_2'].geometry}
                material={materials.Grey}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_Cube006-Mesh_3'].geometry}
                material={materials.Headlights}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_Cube006-Mesh_4'].geometry}
                material={materials.TailLights}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_BackWheels_Cylinder002-Mesh'].geometry}
                material={materials.Black}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_BackWheels_Cylinder002-Mesh_1'].geometry}
                material={materials.Grey}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_FrontLeftWheel_Cylinder017-Mesh'].geometry}
                material={materials.Grey}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_FrontLeftWheel_Cylinder017-Mesh_1'].geometry}
                material={materials.Black}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_FrontRightWheel_Cylinder018-Mesh'].geometry}
                material={materials.Grey}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes['SportsCar2_FrontRightWheel_Cylinder018-Mesh_1'].geometry}
                material={materials.Black}
            />
        </group>
    )
}

useGLTF.preload(`${modelsFolder}Sports Car.glb`)
